/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package twinkleStars;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import knn.*;
import utils.FileToPoint;

/**
 *Draw the coordinate
 *The basic layout is automatically generated by NetBeans
 * @author Scarlett
 */
public class DrawPanel extends javax.swing.JPanel {

    private List<Point> trainingData;
    private List<Point> testingData;
    KnnAlgorithm algorithm;

    int testingIndex = 0;
    int[] displayDimention;

    public void init() {
        trainingData = FileToPoint.readCSVFile("resources/IrisTrain.csv");
        testingData = FileToPoint.readCSVFile("resources/IrisTest.csv");
        displayDimention = new int[]{0, 1};
    }

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        init();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setDisplayDimention(int[] displayDimention) {
        this.displayDimention = displayDimention;
    }

    public Point next() {
//        if(testingIndex < testingData.size() -1) {
//            testingIndex ++;
//        }
//        if(testingIndex ==testingData.size() -1){
//            testingIndex=0;
//         }
        testingIndex = (testingIndex + 1) % testingData.size();
        return testingData.get(testingIndex);
    }

    public void last() {
//        if(testingIndex >=1) {
//            testingIndex --;
//        }
//         if(testingIndex ==0){
//            testingIndex=testingData.size() -1;
//         }
        testingIndex = (testingIndex - 1 + testingData.size()) % testingData.size();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    final Color[] plotColors = {Color.GREEN, Color.PINK, Color.blue};

    @Override
    protected void paintComponent(Graphics g) {
        System.out.println(displayDimention[0] + "\t" + displayDimention[1]);

        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.

        Graphics2D g2 = (Graphics2D) g;
        int padding = 30;
        int width = 300;
        int height = 300;

        double[] scale = {30, 30};
        Map<String, Integer> label2Index = new HashMap<String, Integer>();

        g2.setColor(Color.BLACK);
        g2.drawLine(padding, height - padding, width - padding, height - padding);
        g2.drawLine(padding, height - padding, padding, padding);
       //   init();

        for (Point temp : trainingData) {
            if (!label2Index.containsKey(temp.getLabel())) {
                label2Index.put(temp.getLabel(), label2Index.size());
            }

            Color currentColor = plotColors[label2Index.get(temp.getLabel())];

            int paint_x = (int) (padding + temp.getFeature()[displayDimention[0]] * scale[0]);
            int paint_y = (int) (height - padding - temp.getFeature()[displayDimention[1]] * scale[1]);

            g2.setColor(currentColor);
            g2.drawOval(paint_x - 1, paint_y - 1, 2, 2);

        }

        Point currentTest = testingData.get(testingIndex);
        // paint this point
        int paint_x = (int) (padding + currentTest.getFeature()[displayDimention[0]] * scale[0]);
        int paint_y = (int) (height - padding - currentTest.getFeature()[displayDimention[1]] * scale[1]);
        g2.setColor(Color.RED);
        g2.drawOval(paint_x - 1, paint_y - 1, 2, 2);

        algorithm = new KnnAlgorithm(trainingData);
        for (Point testp : algorithm.getKNN(currentTest, 10)) {
            int knn_x = (int) (padding + testp.getFeature()[displayDimention[0]] * scale[0]);
            int knn_y = (int) (height - padding - testp.getFeature()[displayDimention[1]] * scale[1]);
            Color currentColor = plotColors[label2Index.get(testp.getLabel())];
            g2.setColor(currentColor);
            g2.drawLine(paint_x, paint_y, knn_x, knn_y);
        }
    }

}
